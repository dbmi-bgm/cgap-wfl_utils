============
FF_functions
============

create_metawfr
**************

The function ``create_metawfr_from_case(metawf_uuid<str>, case_uuid<str>, type<str>, ff_key<key>, post=False, patch_case=False, verbose=False)`` allows to create a meta-workflow-run json structure for case from case metadata.
Return json structure for the meta-workflow-run.
Can automatically post the meta-workflow-run as *MetaWorkflowRun* object on the portal and patch ``meta_workflow_run`` key for case with the new uuid.

.. code-block:: python

    from magma_ff import create_metawfr

    # UUIDs
    metawf_uuid = '' # uuid for meta-workflow
    case_uuid = '' # uuid for the case

    # Post | Patch
    #   post=True to automatically post a new MetaWorkflowRun object on the portal
    #   patch_case=True to update meta_workflow_run for case with uuid for new meta-workflow-run

    # type
    #   'WGS trio', 'WGS proband', 'WGS cram proband'
    type = 'WGS trio'

    # ff_key
    #   -> key generated by ff_utils to authenticate on the portal

    metawfr_json = create_metawfr.create_metawfr_from_case(metawf_uuid, case_uuid, type, ff_key, post=False, patch_case=False, verbose=False)


run_metawfr
***********

The function ``run_metawfr(metawfr_uuid<str>, ff_key<key>, verbose=False, sfn='tibanna_zebra', env='fourfront-cgap', maxcount=None)`` allows to run workflow-runs in meta-workflow-run.
Calculates which workflow-runs are ready to run, starts the run with tibanna and patches the metadata.

.. code-block:: python

    from magma_ff import run_metawfr

    # UUIDs
    metawfr_uuid = '' # uuid for meta-workflow-run

    # ff_key
    #   -> key generated by ff_utils to authenticate on the portal

    # env
    #   environment to use to access metadata
    env = 'fourfront-cgap'

    # sfn
    #   step function to use for tibanna
    sfn = 'tibanna_zebra'

    run_metawfr.run_metawfr(metawfr_uuid, ff_key, verbose=False, sfn='tibanna_zebra', env='fourfront-cgap', maxcount=None)


status_metawfr
**************

The function ``status_metawfr(metawfr_uuid<str>, ff_key<key>, verbose=False, env='fourfront-cgap')`` allows to check and patch status for workflow-runs in meta-workflow-run that are running.
Update the status to ``completed`` or ``failed`` for finished runs.

.. code-block:: python

    from magma_ff import status_metawfr

    # UUIDs
    metawfr_uuid = '' # uuid for meta-workflow-run

    # ff_key
    #   -> key generated by ff_utils to authenticate on the portal

    # env
    #   environment to use to access metadata
    env = 'fourfront-cgap'

    status_metawfr.status_metawfr(metawfr_uuid, ff_key, verbose=False, env=env)


import_metawfr
**************

The function ``import_metawfr(metawf_uuid<str>, metawfr_uuid<str>, case_uuid<str>, steps_name<str list>, create_metawfr<function>, type<str>, ff_key<key>, post=False, verbose=False)`` allows to create a new meta-workflow-run json structure for case using specified ``create_metawfr`` function.
Imports information from different meta-workflow-run specified as ``metawfr_uuid`` for steps that are listed in ``steps_name``.
Return json structure for the new meta-workflow-run.
Can automatically post the new meta-workflow-run as *MetaWorkflowRun* object on the portal.

.. code-block:: python

    from magma_ff import import_metawfr
    from magma_ff import create_metawfr

    # UUIDs
    metawf_uuid = '' # uuid for meta-workflow
    metawfr_uuid = '' # uuid for old meta-workflow-run to import
    case_uuid = '' # uuid for the case

    # Post
    #   post=True to automatically post a new MetaWorkflowRun object on the portal

    # ff_key
    #   -> key generated by ff_utils to authenticate on the portal

    # type
    #   'WGS trio', 'WGS proband', 'WGS cram proband'
    type = 'WGS trio'

    # steps_name
    steps_name = ['workflow_granite-mpileupCounts', 'workflow_gatk-ApplyBQSR-check']

    # create_metawfr
    #   function to create a new meta-workflow-run structure from case
    #   e.g. create_metawfr.create_metawfr_from_case

    metawfr_json = import_metawfr.import_metawfr(metawf_uuid, metawfr_uuid, case_uuid, steps_name, create_metawfr.create_metawfr_from_case, type, ff_key)


reset_metawfr
*************

The function ``reset_status(metawfr_uuid<str>, status<str | str list>, step_name<str | str list>, ff_key<key>, verbose=False)`` allows to re-set workflow-runs in meta-workflow-run that correspond to a step defined in ``step_name`` and with status in ``status``.

.. code-block:: python

    from magma_ff import reset_metawfr

    # UUIDs
    metawfr_uuid = '' # uuid for meta-workflow-run

    # ff_key
    #   -> key generated by ff_utils to authenticate on the portal

    # step_name
    #   name or list of names for step-workflows that need to be reset
    step_name = ['workflow_granite-mpileupCounts', 'workflow_gatk-ApplyBQSR-check']

    # status
    #   status or list of status to reset
    status = 'failed' # running | completed | failed

    reset_metawfr.reset_status(metawfr_uuid, status, step_name, ff_key, verbose=False)
